# Cursor Rules for Design System Development

## Component Development Pattern

When creating or modifying components in this design system:

### 1. Component Structure
- ALWAYS create a wrapper component that restricts props
- NEVER allow open-ended string or number props
- Use TypeScript unions for variant options
- Prefer boolean props over string enums

Example:
```typescript
// ✅ GOOD
interface ComponentProps {
  variant?: 'primary' | 'secondary' | 'text';
  small?: boolean;  // Not size: 'xs' | 'sm' | 'md'
  condensed?: boolean;  // Not spacing: 'tight' | 'normal'
}

// ❌ BAD
interface ComponentProps {
  color?: string;
  size?: string;
  spacing?: number;
}
```

### 2. Page Layout Pattern

Component demo pages MUST follow this structure:

```typescript
'use client';  // If using hooks

export default function ComponentPage() {
  // Props state
  const [propName, setPropName] = useState(false);

  return (
    <Stack gap="xl">
      {/* 1. Header */}
      <div>
        <Title>Component Name</Title>
        <Text style={{ color: 'var(--grey)' }}>Description</Text>
      </div>

      {/* 2. Props Section - ALWAYS FIRST */}
      <div>
        <Title order={3}>Props</Title>
        {/* Switches with prop syntax */}
      </div>

      {/* 3. Variants Section */}
      <div>
        <Title order={2}>Variants</Title>
        {/* Component examples */}
      </div>
    </Stack>
  );
}
```

### 3. Color Usage Rules

STRICT COLOR RULES:
- ONLY use CSS variables from globals.css
- NEVER use Mantine color variables (--mantine-color-*)
- NEVER hardcode hex/rgb colors except in globals.css
- NEVER use CSS color names like 'red', 'blue'

```typescript
// ✅ GOOD
style={{ color: 'var(--grey)' }}
style={{ backgroundColor: 'var(--almost-white)' }}

// ❌ BAD
style={{ color: '#333' }}
c="dimmed"
color="blue"
style={{ backgroundColor: 'var(--mantine-color-gray-1)' }}
```

### 4. Props Display

Show props exactly as they'd be used in code:

```typescript
// Boolean props - no quotes
<Text ff="monospace" style={propStyles}>
  disabled={disabled.toString()}
</Text>

// String props - with quotes
<Text ff="monospace" style={propStyles}>
  variant="primary"
</Text>

// Conditional props
<Text ff="monospace" style={propStyles}>
  verticalSpacing="{condensed ? 'xs' : 'lg'}"
</Text>
```

### 5. Switch Styling

All prop switches use this exact pattern:

```typescript
<Switch
  label={
    <Text 
      size="sm" 
      ff="monospace"
      style={{ 
        backgroundColor: 'var(--almost-white)', 
        padding: '4px 8px', 
        borderRadius: '4px',
        display: 'inline-flex',
        alignItems: 'center'
      }}
    >
      propName={propName.toString()}
    </Text>
  }
  checked={propName}
  onChange={(event) => setPropName(event.currentTarget.checked)}
  styles={{ 
    root: { display: 'flex', alignItems: 'center' },
    track: { alignSelf: 'center' }
  }}
/>
```

## Key Principles

1. **Consistency** - Every component follows the same patterns
2. **Restriction** - Components can only be used as intended
3. **Type Safety** - TypeScript enforces all rules
4. **Design Tokens** - Only approved colors and sizes
5. **Boolean Props** - Prefer booleans over enums

## Component Checklist

When reviewing or creating components:
- [ ] Props are restricted via TypeScript
- [ ] Boolean props used where appropriate
- [ ] Only design system colors used
- [ ] Props section appears first on demo page
- [ ] Props displayed with correct syntax
- [ ] Switches use consistent styling
- [ ] Component added to navigation
- [ ] Component exported from index.ts

## Examples to Follow

- **ButtonWrapper** - Shows variant restrictions and boolean `small` prop
- **BadgeWrapper** - Shows state mapping to colors
- **TableWrapper** - Shows multiple boolean props
- Pages: **/badges**, **/tables**, **/buttons** - Show correct page structure